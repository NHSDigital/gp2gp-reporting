#!/bin/bash

set -Eeo pipefail

task="$1"
deployment_env="$2"
aws_region=eu-west-2

function assume_role {
    if [ "${deployment_env}" == "dev" ]; then
      export AWS_ACCOUNT="dev"
    elif [ "${deployment_env}" == "prod" ]; then
      export AWS_ACCOUNT="preprod"
    else
      echo "deployment_env=${deployment_env} is not supported"
      exit 2
    fi

    role_arn=$(dojo -c Dojofile-infra "aws ssm get-parameters --region ${aws_region} --names /registrations/${AWS_ACCOUNT}/user-input/cross-account-admin-role --query Parameters[0].Value --output text")
    session_name="registrations-dashboard-${AWS_ACCOUNT}-session"

    echo "Assuming ${AWS_ACCOUNT} role..."

    sts=($(
        dojo -c Dojofile-infra \
        "aws sts assume-role \
        --role-arn $role_arn \
        --role-session-name $session_name \
        --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
        --output text"
    ))

    export AWS_ACCESS_KEY_ID=${sts[0]}
    export AWS_SECRET_ACCESS_KEY=${sts[1]}
    export AWS_SESSION_TOKEN=${sts[2]}
}

function check_env {
    if [ "$1" != "dev" ] && [ "$1" != "prod" ]; then
        echo "Usage: $0 TASK DEPLOYMENT-ENVIRONMENT"
        echo "DEPLOYMENT-ENVIRONMENT must be dev or prod"
        exit 1
    fi
}

function get_bucket {
    echo "prm-service-dashboard-${deployment_env}"
}

function setup_env {
    check_env "$1"
    export GATSBY_ENV="$1"
    export DEPLOYMENT_ENV="$1"
    export DEPLOYMENT_BUCKET=$(get_bucket)

    if [ "${deployment_env}" == "dev" ]; then
      export DATA_BUCKET_ENV="dev"
    elif [ "${deployment_env}" == "prod" ]; then
      export DATA_BUCKET_ENV="preprod"
    fi
}

case "${task}" in
  canary-test)
      npm i
      npm run test
      ;;
  canary-dojo-test)
      dojo "./tasks canary-test"
      ;;
  canary-test-e2e)
      npm i
      npm run e2e:install
      npm run test:e2e:built
      ;;
  canary-dojo-test-e2e)
      dojo "./tasks test-e2e-canary"
      ;;
  test)
      npm ci -y
      npm run test
      ;;
  dojo-test)
      dojo "./tasks test"
      ;;
  test-e2e)
      npm ci -y
      npm run e2e:install
      npm run test:e2e:built
      ;;
  dojo-test-e2e)
      dojo "./tasks test-e2e"
      ;;
  canary-build)
      setup_env ${deployment_env}
      npm i --production -y
      npm run build:ci
      ;;
  canary-dojo-build)
      dojo "./tasks canary-build ${deployment_env}"
      ;;
  build)
      setup_env ${deployment_env}
      npm ci --production -y
      npm run build:ci
      ;;
  dojo-build)
      dojo "./tasks build ${deployment_env}"
      ;;
  get-stubs)
      npm ci --production -y
      npm run getStubs
      ;;
  dojo-get-stubs)
      dojo "./tasks get-stubs"
      ;;
  get-metrics)
      setup_env ${deployment_env}
      npm ci --production -y
      npm run getPracticeMetrics:ci
      npm run getNationalMetrics:ci
      ;;
  dojo-get-metrics)
      assume_role
      dojo "./tasks get-metrics ${deployment_env}"
      ;;
  deploy)
      npm ci --production -y
      npm run deploy
      ;;
  dojo-deploy)
      assume_role
      dojo "./tasks deploy ${deployment_env}"
      ;;
  dep)
      npm ci -y
      npm run audit > audit-output.txt
      ;;
  dojo-dep)
      dojo "./tasks dep"
      ;;
  update_package_json)
      dojo "npx npm-check-updates -u --target minor"
      ;;
  *)
      echo "Invalid command: '${task}'"
      exit 1
      ;;
esac

set +e
