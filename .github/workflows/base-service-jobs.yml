name: Services Build and Deploy to Dev

on:
  workflow_dispatch:
    inputs:
      environment:
        default: "dev"
        description: "Which environment should this run against"
        required: true
        type: string
      service_name:
        description: "Which Service are we running against?"
        required: true
        type: string  
      is_deployment:
        description: "Do you want changes deployed?"
        required: true
        type: boolean
        default: false    
  workflow_call:
    inputs:
      environment:
        description: "Which Environment settings to use."
        required: true
        type: string
        default: "dev"
      service_name:
        description: "Which Service are we running against?"
        required: true
        type: string
      is_deployment:
        description: "Do you want changes deployed?"
        required: true
        type: boolean
        default: false

permissions:
  pull-requests: write
  id-token: write
  contents: read

jobs:
  test-environment:
    runs-on: ubuntu-latest
    defaults:
          run:
            working-directory: ./services/${{ inputs.service_name }}
    steps:
      - uses: actions/checkout@v4
       
      - name: Install dependencies
        run: pipenv install --dev

      - name: Check formatting
        run: pipenv run check-format

      - name: Run linters
        run: |
          pipenv run lint-flake8
          pipenv run lint-bandit

      - name: Type check
        run: pipenv run typecheck

      - name: Run tests
        run: pipenv run test
              
  build-and-publish-ui:
    if: inputs.is_deployment
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services/${{ inputs.service_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}
 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR repository URI from SSM
        id: ecr-repo
        run: |
          uri=$(aws ssm get-parameter \
          --name "/registrations/${{ vars.AWS_ENVIRONMENT }}/data-pipeline/ecr/url/gp2gp-dashboard" \
          --query "Parameter.Value" --output text)
          echo "uri=$uri" >> $GITHUB_OUTPUT

      # - name: Setup Node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version-file: dashboard/.nvmrc
      #     cache: 'npm'
      #     cache-dependency-path: dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build and Push Docker Image
        env:
          ECR_URI: ${{ steps.ecr-repo.outputs.uri }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_URI:$IMAGE_TAG -t $ECR_URI:latest --build-arg BUILD_TAG=$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:latest
